#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
# Select an item from bitwarden with bemenu, return value for passed query
#
# Usage: bwmenu [query]
#   query: anything on the login object; username, password, totp, etc
#   default: username
#
# Dependencies: bemenu, jq, bitwarden-cli, a working private gpg key
#
# `bw list items` takes a few seconds, so we cache names. This way the menu is
# instant and we can fetch the vault while the user is selecting an input.

query=${1:-username}
items_file=${XDG_CACHE_HOME:-$HOME/.cache}/bwmenu_items

# Names are stored as tab separated values, name & id
cache_names() {
	echo "$vault" | jq --raw-output '.[] | [.name, .id] | @tsv' >"$items_file"
}

# Check if cache exists, if not, build it
if [ ! -f "$items_file" ]; then
	vault=$(bw list items)
	cache_names

	# This only happens on the first run, so we can just bail
	echo "First run, building cache. Please try again."
	exit 1
fi

names=$(<"$items_file")

chosen_item_file=$(mktemp)
trap 'rm -f $chosen_item_file' EXIT SIGINT SIGTERM SIGQUIT

# In the background, Prompt user for input and store result in temp file
# echo "$names" |
echo "$names" | wofi --dmenu --matching fuzzy --insensitive --prompt "$query" \
	>"$chosen_item_file" &

picker_pid=$!

# Fetch vault while user is selecting an input
vault=$(bw list items)

# Cache name & ids for later use
cache_names

# Wait for user input
wait "$picker_pid"

# Read selected item name from temp file
chosen_item=$(<"$chosen_item_file")

# Exit if user pressed escape
[ ! "$chosen_item" = "" ]

chosen_id=$(echo "$chosen_item" | cut -f2)

# Return value for selected item & query
echo "$vault" |
	jq --join-output ".[] | select(.id == \"$chosen_id\") | .login.$query"
